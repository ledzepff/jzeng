import React, { useState, useEffect } from "react";
import ProgressComponent from "@material-ui/core/CircularProgress";

//import logo from './logo.svg';
import './App.css';

function App() {
  const [loading, setLoading] = useState(true);
  const [roomEntered, setRoomEntered] = useState(false);
  const [room, setRoom] = useState("");

  const containerStyle = {
	display: roomEntered ? "block" : "none",
    width: "800px",
    height: "400px",
  };

  const jitsiContainerStyle = {
    display: loading ? "none" : "block",
    width: "100%",
    height: "100%",
  };

  function startConference() {
	console.log("Starting conference");
    try {
      const domain = "konfrans.zenget.az";
      const options = {
        roomName: room,
        height: 600,
        parentNode: document.getElementById("jitsi-container"),
        interfaceConfigOverwrite: {
          filmStripOnly: false,
          SHOW_JITSI_WATERMARK: false,
        },
        configOverwrite: {
          disableSimulcast: false,
        },
      };

      const api = new window.JitsiMeetExternalAPI(domain, options);
	  setLoading(false);
      api.addEventListener("videoConferenceJoined", () => {
        console.log("Local User Joined");
        api.executeCommand("displayName", "Mekhman");
      });
    } catch (error) {
      console.error("Failed to load Jitsi API", error);
    }
  }

  const enterRoom=()=>{
	setRoomEntered(true);
    // verify the JitsiMeetExternalAPI constructor is added to the global..
    if (window.JitsiMeetExternalAPI) startConference();
    else alert("Jitsi Meet API script not loaded");
  }

  const handleResize=()=>{
      console.log('resized to: ', window.innerWidth, 'x', window.innerHeight)  
  }

  useEffect(() => {
	setRoomEntered(false);
	window.addEventListener('resize', handleResize);
    // verify the JitsiMeetExternalAPI constructor is added to the global..
    //if (window.JitsiMeetExternalAPI) startConference();
    //else alert("Jitsi Meet API script not loaded");
  }, []);

  return (
  <div>
   <div style={containerStyle}>
     {loading && <ProgressComponent />}
     <div id="jitsi-container" style={jitsiContainerStyle} />
   </div>
   <div>
   {!roomEntered && (<form>
     <label>Enter room name:
       <input
         type="text" 
         value={room}
         onChange={(e) => setRoom(e.target.value)}
       />
     </label>
	 <button
		type="submit"
		name="enterRoom"
		id="enterRoom"
		onClick={() => enterRoom()}>
		Enter Room
	 </button>
   </form>)}
   </div>
  </div>
  );
}

export default App;
